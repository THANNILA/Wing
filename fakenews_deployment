1. app.py


from flask import Flask, render_template, request
import pickle
import joblib
import re
import pandas as pd

app = Flask(__name__)

# Load vectorizer and models
vectorizer = joblib.load("models/tfidf_vectorizer.pkl")
models = {
    "LR": pickle.load(open("models/logistic_regression.pkl", "rb")),
    "DT": pickle.load(open("models/decision_tree.pkl", "rb")),
    "GBC": pickle.load(open("models/gradient_boosting.pkl", "rb")),
    "RFC": pickle.load(open("models/random_forest.pkl", "rb"))
}

def wordopt(text):
    text = text.lower()
    text = re.sub(r'\[.*?\]', '', text)
    text = re.sub(r'https?://\S+|www\.\S+', '', text)
    text = re.sub(r'<.*?>+', '', text)
    text = re.sub(r'[^a-zA-Z]', ' ', text)
    text = re.sub(r'\n', '', text)
    text = re.sub(r'\w*\d\w*', '', text)
    return text

def output_label(n):
    return "Fake News" if n == 0 else "Not A Fake News"

@app.route('/')
def index():
    return render_template("index.html")

@app.route('/predict', methods=['POST'])
def predict():
    news = request.form['news']
    clean_news = wordopt(news)
    vect = vectorizer.transform([clean_news])

    results = {}
    for name, model in models.items():
        pred = model.predict(vect)[0]
        results[name] = output_label(pred)

    return render_template("result.html", results=results, news=news)

if __name__ == "__main__":
    app.run(debug=True)





2.train_and_save_models.py:

# train_and_save_models.py
import pandas as pd
import numpy as np
import re
import os
import pickle
import joblib
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier
print("Current directory:", os.getcwd())
print("Files here:", os.listdir())

os.makedirs("models", exist_ok=True)

df = pd.read_csv("merged_dataset.csv")

def clean_text(text):
    text = text.lower()
    text = re.sub(r'\[.*?\]', '', text)
    text = re.sub(r'https?://\S+|www\.\S+', '', text)
    text = re.sub(r'<.*?>+', '', text)
    text = re.sub(r'[^a-zA-Z]', ' ', text)
    text = re.sub(r'\n', ' ', text)
    text = re.sub(r'\w*\d\w*', '', text)
    return text

df["text"] = df["text"].apply(clean_text)
X = df["text"]
y = df["class"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

vectorizer = TfidfVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
joblib.dump(vectorizer, "models/tfidf_vectorizer.pkl")

# Train and save all 4 models
models = {
    "logistic_regression": LogisticRegression(),
    "decision_tree": DecisionTreeClassifier(),
    "gradient_boosting": GradientBoostingClassifier(),
    "random_forest": RandomForestClassifier()
}

for name, model in models.items():
    model.fit(X_train_vec, y_train)
    with open(f"models/{name}.pkl", "wb") as f:
        pickle.dump(model, f)

print(" Models and vectorizer saved.")


3.index.html:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Fake News Detector</title>
    <style>
        body {
            background: linear-gradient(135deg, #ffecd2, #fcb69f);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            text-align: center;
        }

        h1 {
            font-size: 48px;
            color: #ffffff;
            background: linear-gradient(to right, #ff416c, #ff4b2b);
            padding: 20px 40px;
            border-radius: 20px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
            text-shadow: 2px 2px 5px #00000050;
            margin-bottom: 30px;
        }

        form {
            background-color: #ffffffee;
            padding: 30px 40px;
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(0,0,0,0.2);
            max-width: 700px;
            width: 90%;
        }

        textarea {
            width: 100%;
            padding: 15px;
            font-size: 16px;
            border-radius: 10px;
            border: 2px solid #ff7f50;
            resize: none;
        }

        input[type="submit"] {
            margin-top: 20px;
            padding: 12px 30px;
            font-size: 16px;
            font-weight: bold;
            color: white;
            background-color: #ff4b2b;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        input[type="submit"]:hover {
            background-color: #e84118;
        }
    </style>
</head>
<body>
    <h1>üì∞ FAKE NEWS DETECTOR</h1>
    <form action="/predict" method="post">
        <textarea name="news" rows="10" cols="80" placeholder="Paste news here..." required></textarea><br>
        <input type="submit" value="Detect Fake News">
    </form>
</body>
</html>

4.result.html:
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Prediction Result</title>
<style>
body {
margin: 0;
padding: 40px;
background: linear-gradient(to right, #ffecd2, #fcb69f);
font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
display: flex;
 justify-content: center;
}

.container {
 background-color: #ffffffcc;
padding: 20px 40px;
 border-radius: 4px; /* Sharper rectangle */
 box-shadow: 0 6px 18px rgba(0, 0, 0, 0.2);
 width: 900px; /* Wider for stronger rectangle appearance */
 min-height: 220px; /* Less height for more horizontal look */
display: flex;
flex-direction: column;
 justify-content: center;
}

 h2 {
 color: #333;
margin: 10px 0;
 font-size: 20px;
}

 p {
 background-color: #fdf2e9;
 padding: 10px;
 border-left: 4px solid #f5b041;
 border-radius: 6px;
 font-size: 14px;
 color: #4a4a4a;
 margin: 8px 0 16px 0;
 }

ul {
 list-style: none;
 padding-left: 0;
 margin: 0;
 }

 li {
 background-color: #e8f8f5;
 margin: 6px 0;
 padding: 8px 10px;
 border-left: 4px solid #45b39d;
 border-radius: 6px;
 font-size: 14px;
 color: #2c3e50;
 }

 a {
 display: inline-block;
 margin-top: 16px;
 padding: 8px 16px;
 background-color: #5dade2;
 color: white;
 text-decoration: none;
 font-weight: bold;
 border-radius: 6px;
 transition: background-color 0.3s ease;
 font-size: 14px;
 }

 a:hover {
 background-color: #3498db;
 }
 </style>
</head>
<body>
 <div class="container">
<h2>üìù Input:</h2>
 <p>{{ news }}</p>

<h2>üìä Predictions:</h2>
 <ul>
 <li><strong>Logistic Regression:</strong> {{ results['LR'] }}</li>
 <li><strong>Decision Tree:</strong> {{ results['DT'] }}</li>
 <li><strong>Gradient Boosting:</strong> {{ results['GBC'] }}</li>
 <li><strong>Random Forest:</strong> {{ results['RFC'] }}</li>
 </ul>

 <a href="/">üîÅ Try Another</a>
 </div>
</body>
</html>



